<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="22" failures="0" time="1.154">
  <testsuite name="path" errors="0" failures="0" skipped="22" timestamp="2020-09-29T21:26:10" time="1.09" tests="22">
    <testcase classname="path getFileType(&quot;Rock and Roll.flac: audio/flac; charset=binary&quot;) should return flac" name="path getFileType(&quot;Rock and Roll.flac: audio/flac; charset=binary&quot;) should return flac" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getFileType(&quot;Rock and Roll.mp3: audio/mpeg; charset=binary&quot;) should return mp3" name="path getFileType(&quot;Rock and Roll.mp3: audio/mpeg; charset=binary&quot;) should return mp3" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getFileType(&quot;folder.jpg: image/jpeg; charset=binary&quot;) should return jpg" name="path getFileType(&quot;folder.jpg: image/jpeg; charset=binary&quot;) should return jpg" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getFileType(&quot;whuut.png: jobbish; charset=binary&quot;) should return unknown" name="path getFileType(&quot;whuut.png: jobbish; charset=binary&quot;) should return unknown" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path when current pwd is  getPwd() return {&quot;epected&quot;:[]})" name="path when current pwd is  getPwd() return {&quot;epected&quot;:[]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path when current pwd is / getPwd() return {&quot;epected&quot;:[]})" name="path when current pwd is / getPwd() return {&quot;epected&quot;:[]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path when current pwd is /path getPwd() return {&quot;epected&quot;:[&quot;path&quot;]})" name="path when current pwd is /path getPwd() return {&quot;epected&quot;:[&quot;path&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path when current pwd is /my/path getPwd() return {&quot;epected&quot;:[&quot;my&quot;,&quot;path&quot;]})" name="path when current pwd is /my/path getPwd() return {&quot;epected&quot;:[&quot;my&quot;,&quot;path&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path when current pwd is /home/my/path getPwd() return {&quot;epected&quot;:[&quot;home&quot;,&quot;my&quot;,&quot;path&quot;]})" name="path when current pwd is /home/my/path getPwd() return {&quot;epected&quot;:[&quot;home&quot;,&quot;my&quot;,&quot;path&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath() should return {&quot;epected&quot;:[]})" name="path getAlbumArtistInfoFromPath() should return {&quot;epected&quot;:[]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/) should return {&quot;epected&quot;:[]})" name="path getAlbumArtistInfoFromPath(/) should return {&quot;epected&quot;:[]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/album) should return {&quot;epected&quot;:[&quot;album&quot;]})" name="path getAlbumArtistInfoFromPath(/album) should return {&quot;epected&quot;:[&quot;album&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" name="path getAlbumArtistInfoFromPath(/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/lib/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" name="path getAlbumArtistInfoFromPath(/lib/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseAlbumSplit(album) should return {&quot;epected&quot;:{&quot;album&quot;:&quot;Album&quot;}})" name="path parseAlbumSplit(album) should return {&quot;epected&quot;:{&quot;album&quot;:&quot;Album&quot;}})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseAlbumSplit(album (disc21 )) should return {&quot;epected&quot;:{&quot;album&quot;:&quot;Album&quot;,&quot;discnumber&quot;:&quot;21&quot;}})" name="path parseAlbumSplit(album (disc21 )) should return {&quot;epected&quot;:{&quot;album&quot;:&quot;Album&quot;,&quot;discnumber&quot;:&quot;21&quot;}})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseAlbumSplit(album ( disc  21 )) should return {&quot;epected&quot;:{&quot;album&quot;:&quot;Album&quot;,&quot;discnumber&quot;:&quot;21&quot;}})" name="path parseAlbumSplit(album ( disc  21 )) should return {&quot;epected&quot;:{&quot;album&quot;:&quot;Album&quot;,&quot;discnumber&quot;:&quot;21&quot;}})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseDiskNumer(album) should return {&quot;epected&quot;:[null,&quot;album&quot;]})" name="path parseDiskNumer(album) should return {&quot;epected&quot;:[null,&quot;album&quot;]})" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="path parseDiskNumer(album (disc21 )) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album&quot;]})" name="path parseDiskNumer(album (disc21 )) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseDiskNumer(album ( disc  21 )) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album&quot;]})" name="path parseDiskNumer(album ( disc  21 )) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseDiskNumer(album of the year ( disc  21 )) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album of the year&quot;]})" name="path parseDiskNumer(album of the year ( disc  21 )) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album of the year&quot;]})" time="0">
      <skipped/>
    </testcase>
    <testcase classname="path parseDiskNumer(album of the year ( disc  21 ) [1979 - 1980]) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album of the year [1979 - 1980]&quot;]})" name="path parseDiskNumer(album of the year ( disc  21 ) [1979 - 1980]) should return {&quot;epected&quot;:[&quot;21&quot;,&quot;album of the year [1979 - 1980]&quot;]})" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>