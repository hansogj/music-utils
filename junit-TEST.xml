<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="20" failures="1" time="57.444">
  <testsuite name="prompt" errors="0" failures="1" skipped="4" timestamp="2020-09-26T07:23:34" time="56.339" tests="5">
    <testcase classname="prompt when user responds positive albumPrompt should pass back release object" name="prompt when user responds positive albumPrompt should pass back release object" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="prompt when user responds positive albumPrompt should pass back release object" name="prompt when user responds positive albumPrompt should pass back release object" time="0">
      <skipped/>
    </testcase>
    <testcase classname="prompt when user responds positive albumPrompt should pass back release object" name="prompt when user responds positive albumPrompt should pass back release object" time="0">
      <skipped/>
    </testcase>
    <testcase classname="prompt when user responds positive albumPrompt should pass back release object" name="prompt when user responds positive albumPrompt should pass back release object" time="0">
      <skipped/>
    </testcase>
    <testcase classname="prompt when user responds negative once albumPrompt should pass back altered relase object" name="prompt when user responds negative once albumPrompt should pass back altered relase object" time="50.82">
      <failure>Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 0

  Object {
-   &quot;album&quot;: &quot;MDK&quot;,
    &quot;artist&quot;: &quot;Magma&quot;,
  }
    at /git/music-utils/src/utils/prompt.test.ts:35:54</failure>
    </testcase>
  </testsuite>
  <testsuite name="path" errors="0" failures="0" skipped="0" timestamp="2020-09-26T07:24:30" time="0.555" tests="14">
    <testcase classname="path getFileType(&quot;Rock and Roll.flac: audio/flac; charset=binary&quot;) should return flac" name="path getFileType(&quot;Rock and Roll.flac: audio/flac; charset=binary&quot;) should return flac" time="0.004">
    </testcase>
    <testcase classname="path getFileType(&quot;Rock and Roll.mp3: audio/mpeg; charset=binary&quot;) should return mp3" name="path getFileType(&quot;Rock and Roll.mp3: audio/mpeg; charset=binary&quot;) should return mp3" time="0.001">
    </testcase>
    <testcase classname="path getFileType(&quot;folder.jpg: image/jpeg; charset=binary&quot;) should return jpg" name="path getFileType(&quot;folder.jpg: image/jpeg; charset=binary&quot;) should return jpg" time="0.001">
    </testcase>
    <testcase classname="path getFileType(&quot;whuut.png: jobbish; charset=binary&quot;) should return unknown" name="path getFileType(&quot;whuut.png: jobbish; charset=binary&quot;) should return unknown" time="0.001">
    </testcase>
    <testcase classname="path when current pwd is  getPwd() return {&quot;epected&quot;:[]})" name="path when current pwd is  getPwd() return {&quot;epected&quot;:[]})" time="0.001">
    </testcase>
    <testcase classname="path when current pwd is / getPwd() return {&quot;epected&quot;:[]})" name="path when current pwd is / getPwd() return {&quot;epected&quot;:[]})" time="0.001">
    </testcase>
    <testcase classname="path when current pwd is /path getPwd() return {&quot;epected&quot;:[&quot;path&quot;]})" name="path when current pwd is /path getPwd() return {&quot;epected&quot;:[&quot;path&quot;]})" time="0.001">
    </testcase>
    <testcase classname="path when current pwd is /my/path getPwd() return {&quot;epected&quot;:[&quot;my&quot;,&quot;path&quot;]})" name="path when current pwd is /my/path getPwd() return {&quot;epected&quot;:[&quot;my&quot;,&quot;path&quot;]})" time="0.001">
    </testcase>
    <testcase classname="path when current pwd is /home/my/path getPwd() return {&quot;epected&quot;:[&quot;home&quot;,&quot;my&quot;,&quot;path&quot;]})" name="path when current pwd is /home/my/path getPwd() return {&quot;epected&quot;:[&quot;home&quot;,&quot;my&quot;,&quot;path&quot;]})" time="0.001">
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath() should return {&quot;epected&quot;:[]})" name="path getAlbumArtistInfoFromPath() should return {&quot;epected&quot;:[]})" time="0.002">
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/) should return {&quot;epected&quot;:[]})" name="path getAlbumArtistInfoFromPath(/) should return {&quot;epected&quot;:[]})" time="0.001">
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/album) should return {&quot;epected&quot;:[&quot;album&quot;]})" name="path getAlbumArtistInfoFromPath(/album) should return {&quot;epected&quot;:[&quot;album&quot;]})" time="0.001">
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" name="path getAlbumArtistInfoFromPath(/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" time="0">
    </testcase>
    <testcase classname="path getAlbumArtistInfoFromPath(/lib/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" name="path getAlbumArtistInfoFromPath(/lib/artis/album) should return {&quot;epected&quot;:[&quot;artis&quot;,&quot;album&quot;]})" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="tag album" errors="0" failures="0" skipped="0" timestamp="2020-09-26T07:24:31" time="0.419" tests="1">
    <testcase classname="tag album is defined" name="tag album is defined" time="0.002">
    </testcase>
  </testsuite>
</testsuites>